{
  "service": {
    "service": "caravan-scrapers",
    "serviceObject": {
      "name": "caravan-scrapers"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.9",
      "region": "us-east-1",
      "timeout": 60,
      "memorySize": 512,
      "logRetentionInDays": 14,
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ScrapeTraverseCityStateParkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeTraverseCityStatePark",
              "RetentionInDays": 14
            }
          },
          "ScrapeTraverseCityKoaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeTraverseCityKoa",
              "RetentionInDays": 14
            }
          },
          "ScrapeUncleDuckysPaddlersVillageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeUncleDuckysPaddlersVillage",
              "RetentionInDays": 14
            }
          },
          "ScrapeAnchorInnLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeAnchorInn",
              "RetentionInDays": 14
            }
          },
          "ScrapeLeelanauPinesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeLeelanauPines",
              "RetentionInDays": 14
            }
          },
          "ScrapeTimberRidgeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeTimberRidge",
              "RetentionInDays": 14
            }
          },
          "ScrapeStIgnaceKoaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeStIgnaceKoa",
              "RetentionInDays": 14
            }
          },
          "ScrapeIndianRiverLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeIndianRiver",
              "RetentionInDays": 14
            }
          },
          "ScrapeStraitsStateParkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeStraitsStatePark",
              "RetentionInDays": 14
            }
          },
          "ScrapeCabinsOfMackinawLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeCabinsOfMackinaw",
              "RetentionInDays": 14
            }
          },
          "ScrapeTeePeeCampgroundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeTeePeeCampground",
              "RetentionInDays": 14
            }
          },
          "ScrapeMunisingKoaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeMunisingKoa",
              "RetentionInDays": 14
            }
          },
          "ScrapeTouristParkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeTouristPark",
              "RetentionInDays": 14
            }
          },
          "ScrapeUncleDuckysAuTrainLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeUncleDuckysAuTrain",
              "RetentionInDays": 14
            }
          },
          "ScrapeFortSuperiorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeFortSuperior",
              "RetentionInDays": 14
            }
          },
          "ScrapeAuTrainLakeCampgroundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeAuTrainLakeCampground",
              "RetentionInDays": 14
            }
          },
          "ScrapeMidnrReservationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/caravan-scrapers-dev-scrapeMidnrReservations",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "caravan-scrapers",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/caravan-scrapers-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/caravan-scrapers-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "caravan-scrapers",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ScrapeTraverseCityStateParkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeTraverseCityStatePark.zip"
              },
              "Handler": "scrapers/traverse_city/scrapeTraverseCityStatePark/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeTraverseCityStatePark",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeTraverseCityStateParkLogGroup"
            ]
          },
          "ScrapeTraverseCityKoaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeTraverseCityKoa.zip"
              },
              "Handler": "scrapers/traverse_city/scrapeTraverseCityKoa/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeTraverseCityKoa",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeTraverseCityKoaLogGroup"
            ]
          },
          "ScrapeUncleDuckysPaddlersVillageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeUncleDuckysPaddlersVillage.zip"
              },
              "Handler": "scrapers/traverse_city/scrapeUncleDuckysPaddlersVillage/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeUncleDuckysPaddlersVillage",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeUncleDuckysPaddlersVillageLogGroup"
            ]
          },
          "ScrapeAnchorInnLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeAnchorInn.zip"
              },
              "Handler": "scrapers/traverse_city/scrapeAnchorInn/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeAnchorInn",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeAnchorInnLogGroup"
            ]
          },
          "ScrapeLeelanauPinesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeLeelanauPines.zip"
              },
              "Handler": "scrapers/traverse_city/scrapeLeelanauPines/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeLeelanauPines",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeLeelanauPinesLogGroup"
            ]
          },
          "ScrapeTimberRidgeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeTimberRidge.zip"
              },
              "Handler": "scrapers/traverse_city/scrapeTimberRidge/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeTimberRidge",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeTimberRidgeLogGroup"
            ]
          },
          "ScrapeStIgnaceKoaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeStIgnaceKoa.zip"
              },
              "Handler": "scrapers/mackinac_city/scrapeStIgnaceKoa/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeStIgnaceKoa",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeStIgnaceKoaLogGroup"
            ]
          },
          "ScrapeIndianRiverLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeIndianRiver.zip"
              },
              "Handler": "scrapers/mackinac_city/scrapeIndianRiver/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeIndianRiver",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeIndianRiverLogGroup"
            ]
          },
          "ScrapeStraitsStateParkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeStraitsStatePark.zip"
              },
              "Handler": "scrapers/mackinac_city/scrapeStraitsStatePark/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeStraitsStatePark",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeStraitsStateParkLogGroup"
            ]
          },
          "ScrapeCabinsOfMackinawLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeCabinsOfMackinaw.zip"
              },
              "Handler": "scrapers/mackinac_city/scrapeCabinsOfMackinaw/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeCabinsOfMackinaw",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeCabinsOfMackinawLogGroup"
            ]
          },
          "ScrapeTeePeeCampgroundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeTeePeeCampground.zip"
              },
              "Handler": "scrapers/mackinac_city/scrapeTeePeeCampground/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeTeePeeCampground",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeTeePeeCampgroundLogGroup"
            ]
          },
          "ScrapeMunisingKoaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeMunisingKoa.zip"
              },
              "Handler": "scrapers/pictured_rocks/scrapeMunisingKoa/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeMunisingKoa",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeMunisingKoaLogGroup"
            ]
          },
          "ScrapeTouristParkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeTouristPark.zip"
              },
              "Handler": "scrapers/pictured_rocks/scrapeTouristPark/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeTouristPark",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeTouristParkLogGroup"
            ]
          },
          "ScrapeUncleDuckysAuTrainLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeUncleDuckysAuTrain.zip"
              },
              "Handler": "scrapers/pictured_rocks/scrapeUncleDuckysAuTrain/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeUncleDuckysAuTrain",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeUncleDuckysAuTrainLogGroup"
            ]
          },
          "ScrapeFortSuperiorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeFortSuperior.zip"
              },
              "Handler": "scrapers/pictured_rocks/scrapeFortSuperior/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeFortSuperior",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeFortSuperiorLogGroup"
            ]
          },
          "ScrapeAuTrainLakeCampgroundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeAuTrainLakeCampground.zip"
              },
              "Handler": "scrapers/pictured_rocks/scrapeAuTrainLakeCampground/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeAuTrainLakeCampground",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeAuTrainLakeCampgroundLogGroup"
            ]
          },
          "ScrapeMidnrReservationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
                "S3Key": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z/scrapeMidnrReservations.zip"
              },
              "Handler": "scrapers/midnrReservations/lambda_function.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "caravan-scrapers-dev-scrapeMidnrReservations",
              "MemorySize": 512,
              "Timeout": 60,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrapeMidnrReservationsLogGroup"
            ]
          },
          "ScrapeTraverseCityStateParkLambdaVersionyLIWgodsE3CpIGA6bakR90OkVdkeRMvlBrewdxi8Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeTraverseCityStateParkLambdaFunction"
              },
              "CodeSha256": "Q0dUvJmUMsYlHjoLRnLmiMNIBPLl7ZfG3o0ik34VbMk="
            }
          },
          "ScrapeAnchorInnLambdaVersion5T5Zbadt4QpbkGSuv9ZPCSLDjwGaaZQxyhV3HvLaGqE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeAnchorInnLambdaFunction"
              },
              "CodeSha256": "tHzflx7g1zAULDYVCulm4BnDEspQaOGVYOF/rDc8o0U="
            }
          },
          "ScrapeTraverseCityKoaLambdaVersionrpDyi8CalRjcKv8gf76rei0qgtsdzrnt4nqKXxdo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeTraverseCityKoaLambdaFunction"
              },
              "CodeSha256": "RVanBiYyl8Z+ibJ1CWDfYVGBoHwxNv+ugKpVD6HEgGU="
            }
          },
          "ScrapeUncleDuckysPaddlersVillageLambdaVersion2v5iOfrPUuxVPxccTzCgB0GHjOJIREiySdAxIYseo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeUncleDuckysPaddlersVillageLambdaFunction"
              },
              "CodeSha256": "OfTpj0tjAp0GtCoRmkbT+5vO4uE4F8HQO06MtJJLrns="
            }
          },
          "ScrapeLeelanauPinesLambdaVersionnGM10RAySqs3BhnEf0DjyTm6lNMETj8ijhVsga0JY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeLeelanauPinesLambdaFunction"
              },
              "CodeSha256": "2Ly9UVvL9FnM3DpcV/zO5aurZ9ubeP/7yf0Di8YPORw="
            }
          },
          "ScrapeTimberRidgeLambdaVersion5l4uAHg0M8VlvfRJYXfIEuqh10s21XV6gQSApWTRQtU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeTimberRidgeLambdaFunction"
              },
              "CodeSha256": "/glU2N/afTbhbhI/Olh6gGcK2iP5PKYoLwT3qHStyxw="
            }
          },
          "ScrapeStraitsStateParkLambdaVersionVmcUaatyFK7ShwMcZqf0OdNsL2Gj1DLZ5TawZtGxUQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeStraitsStateParkLambdaFunction"
              },
              "CodeSha256": "jy2K4cXqI6yRlG/XpNbyhJecyev8Tx04BLyhR0UfKWE="
            }
          },
          "ScrapeStIgnaceKoaLambdaVersionSssuszPczfC7KHS0F5W0OMVtxZxny6iODfqGNFRi4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeStIgnaceKoaLambdaFunction"
              },
              "CodeSha256": "isZfeQOdeisPMtWgkrh4uYb61I2ojud1kOyHBeY1IWg="
            }
          },
          "ScrapeIndianRiverLambdaVersioncqLh0y2CFVywagstmiHuvGqtvNLtJMcvoflAAUCG8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeIndianRiverLambdaFunction"
              },
              "CodeSha256": "pCWxqBbt1mV8DejmHo9CE0aQM/XsJrQohCIwE3qm3N4="
            }
          },
          "ScrapeTeePeeCampgroundLambdaVersionsF7VWzQHec1yaVRjj3ePS0Uki7PcAkNBl14AHVwqn8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeTeePeeCampgroundLambdaFunction"
              },
              "CodeSha256": "46XvO2uurbW8gyoE5Uvj4YoJpysghrnHaQkBMjc9v+Q="
            }
          },
          "ScrapeCabinsOfMackinawLambdaVersionoXcvISDPCvroxxCc2MExZU1aOeKtZUU5L4lSfwhyLdA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeCabinsOfMackinawLambdaFunction"
              },
              "CodeSha256": "3o4xEU4l3luQjFTEvnYbm92arr4Zl7YfZFEIwh1iMJk="
            }
          },
          "ScrapeUncleDuckysAuTrainLambdaVersionp3DMjI8M4RpcOsPD5kJ438ilKDYP7kqpDn4q77ku8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeUncleDuckysAuTrainLambdaFunction"
              },
              "CodeSha256": "gQZS6QRGgCEvqBlUpSLJ+KNiDVilxR3Hrh7X4RoTPKc="
            }
          },
          "ScrapeTouristParkLambdaVersiongvPUjCsRHj4DijvxmDjo6Kp9f1InipLbmuozBLq4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeTouristParkLambdaFunction"
              },
              "CodeSha256": "mQBOvLVhW7SYPQNkPidxY5u7r7s9V31eWCKVdkucNj8="
            }
          },
          "ScrapeMunisingKoaLambdaVersionujaeolBvWGJMmpii0M1HUDt7ifHc2lNQ84E8PeAt8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeMunisingKoaLambdaFunction"
              },
              "CodeSha256": "cnKpg8CT5WXTk+kKI3tgyZb4JH1sFF7oDDyQhPO3rWU="
            }
          },
          "ScrapeFortSuperiorLambdaVersionK3j37Zxx1CsQpK6mJvJbvAqheE9S3P8Fw0NO6a3e2A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeFortSuperiorLambdaFunction"
              },
              "CodeSha256": "/YITV2Wmfeckj+x8Sm1Cu3kUXMtccMg1rQWvgjKkuZc="
            }
          },
          "ScrapeAuTrainLakeCampgroundLambdaVersionSL9ozOGgH2T4fsIJNU0A3EuGpnTzOuh4BtK5NCKAY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeAuTrainLakeCampgroundLambdaFunction"
              },
              "CodeSha256": "ZPtwaM1GqgZFgVwWrewyX83kbl8GJDEuxlzA/BuNrYU="
            }
          },
          "ScrapeMidnrReservationsLambdaVersion7FFMII94qcOvPbF728Va88YcJrReVfDQaRLvYQ8u0Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrapeMidnrReservationsLambdaFunction"
              },
              "CodeSha256": "s9zKnwn2dDLFpv+mZ7SumEq8fle4Y2QYK4z6thSr1Eo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-caravan-scrapers",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceScrapers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "scrapers",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersTraverseDashcityDashstateDashpark": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "traverse-city-state-park",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersTraverseDashcityDashkoa": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "traverse-city-koa",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersUncleDashduckysDashpaddlersDashvillage": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "uncle-duckys-paddlers-village",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersAnchorDashinn": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "anchor-inn",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersLeelanauDashpines": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "leelanau-pines",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersTimberDashridge": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "timber-ridge",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersStDashignaceDashkoa": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "st-ignace-koa",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersIndianDashriver": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "indian-river",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersStraitsDashstateDashpark": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "straits-state-park",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersCabinsDashofDashmackinaw": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "cabins-of-mackinaw",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersTeepeeDashcampground": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "teepee-campground",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersMunisingDashkoa": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "munising-koa",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersTouristDashpark": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "tourist-park",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersUncleDashduckysDashauDashtrain": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "uncle-duckys-au-train",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersFortDashsuperior": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "fort-superior",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersAuDashtrainDashlake": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "au-train-lake",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrapersMidnrDashreservations": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrapers"
              },
              "PathPart": "midnr-reservations",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersTraverseDashcityDashstateDashparkOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTraverseDashcityDashstateDashpark"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersTraverseDashcityDashkoaOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTraverseDashcityDashkoa"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersUncleDashduckysDashpaddlersDashvillageOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersUncleDashduckysDashpaddlersDashvillage"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersAnchorDashinnOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersAnchorDashinn"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersLeelanauDashpinesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersLeelanauDashpines"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersTimberDashridgeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTimberDashridge"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersStDashignaceDashkoaOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersStDashignaceDashkoa"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersIndianDashriverOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersIndianDashriver"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersStraitsDashstateDashparkOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersStraitsDashstateDashpark"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersCabinsDashofDashmackinawOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersCabinsDashofDashmackinaw"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersTeepeeDashcampgroundOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTeepeeDashcampground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersMunisingDashkoaOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersMunisingDashkoa"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersTouristDashparkOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTouristDashpark"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersUncleDashduckysDashauDashtrainOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersUncleDashduckysDashauDashtrain"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersFortDashsuperiorOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersFortDashsuperior"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersAuDashtrainDashlakeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersAuDashtrainDashlake"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersMidnrDashreservationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersMidnrDashreservations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodScrapersTraverseDashcityDashstateDashparkPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTraverseDashcityDashstateDashpark"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeTraverseCityStateParkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeTraverseCityStateParkLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersTraverseDashcityDashkoaPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTraverseDashcityDashkoa"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeTraverseCityKoaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeTraverseCityKoaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersUncleDashduckysDashpaddlersDashvillagePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersUncleDashduckysDashpaddlersDashvillage"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeUncleDuckysPaddlersVillageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeUncleDuckysPaddlersVillageLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersAnchorDashinnPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersAnchorDashinn"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeAnchorInnLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeAnchorInnLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersLeelanauDashpinesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersLeelanauDashpines"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeLeelanauPinesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeLeelanauPinesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersTimberDashridgePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTimberDashridge"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeTimberRidgeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeTimberRidgeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersStDashignaceDashkoaPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersStDashignaceDashkoa"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeStIgnaceKoaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeStIgnaceKoaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersIndianDashriverPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersIndianDashriver"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeIndianRiverLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeIndianRiverLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersStraitsDashstateDashparkPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersStraitsDashstateDashpark"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeStraitsStateParkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeStraitsStateParkLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersCabinsDashofDashmackinawPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersCabinsDashofDashmackinaw"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeCabinsOfMackinawLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeCabinsOfMackinawLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersTeepeeDashcampgroundPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTeepeeDashcampground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeTeePeeCampgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeTeePeeCampgroundLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersMunisingDashkoaPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersMunisingDashkoa"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeMunisingKoaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeMunisingKoaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersTouristDashparkPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersTouristDashpark"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeTouristParkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeTouristParkLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersUncleDashduckysDashauDashtrainPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersUncleDashduckysDashauDashtrain"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeUncleDuckysAuTrainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeUncleDuckysAuTrainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersFortDashsuperiorPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersFortDashsuperior"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeFortSuperiorLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeFortSuperiorLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersAuDashtrainDashlakePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersAuDashtrainDashlake"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeAuTrainLakeCampgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeAuTrainLakeCampgroundLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScrapersMidnrDashreservationsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrapersMidnrDashreservations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrapeMidnrReservationsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScrapeMidnrReservationsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1745461391535": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodScrapersTraverseDashcityDashstateDashparkOptions",
              "ApiGatewayMethodScrapersTraverseDashcityDashkoaOptions",
              "ApiGatewayMethodScrapersUncleDashduckysDashpaddlersDashvillageOptions",
              "ApiGatewayMethodScrapersAnchorDashinnOptions",
              "ApiGatewayMethodScrapersLeelanauDashpinesOptions",
              "ApiGatewayMethodScrapersTimberDashridgeOptions",
              "ApiGatewayMethodScrapersStDashignaceDashkoaOptions",
              "ApiGatewayMethodScrapersIndianDashriverOptions",
              "ApiGatewayMethodScrapersStraitsDashstateDashparkOptions",
              "ApiGatewayMethodScrapersCabinsDashofDashmackinawOptions",
              "ApiGatewayMethodScrapersTeepeeDashcampgroundOptions",
              "ApiGatewayMethodScrapersMunisingDashkoaOptions",
              "ApiGatewayMethodScrapersTouristDashparkOptions",
              "ApiGatewayMethodScrapersUncleDashduckysDashauDashtrainOptions",
              "ApiGatewayMethodScrapersFortDashsuperiorOptions",
              "ApiGatewayMethodScrapersAuDashtrainDashlakeOptions",
              "ApiGatewayMethodScrapersMidnrDashreservationsOptions",
              "ApiGatewayMethodScrapersTraverseDashcityDashstateDashparkPost",
              "ApiGatewayMethodScrapersTraverseDashcityDashkoaPost",
              "ApiGatewayMethodScrapersUncleDashduckysDashpaddlersDashvillagePost",
              "ApiGatewayMethodScrapersAnchorDashinnPost",
              "ApiGatewayMethodScrapersLeelanauDashpinesPost",
              "ApiGatewayMethodScrapersTimberDashridgePost",
              "ApiGatewayMethodScrapersStDashignaceDashkoaPost",
              "ApiGatewayMethodScrapersIndianDashriverPost",
              "ApiGatewayMethodScrapersStraitsDashstateDashparkPost",
              "ApiGatewayMethodScrapersCabinsDashofDashmackinawPost",
              "ApiGatewayMethodScrapersTeepeeDashcampgroundPost",
              "ApiGatewayMethodScrapersMunisingDashkoaPost",
              "ApiGatewayMethodScrapersTouristDashparkPost",
              "ApiGatewayMethodScrapersUncleDashduckysDashauDashtrainPost",
              "ApiGatewayMethodScrapersFortDashsuperiorPost",
              "ApiGatewayMethodScrapersAuDashtrainDashlakePost",
              "ApiGatewayMethodScrapersMidnrDashreservationsPost"
            ]
          },
          "ScrapeTraverseCityStateParkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeTraverseCityStateParkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeTraverseCityKoaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeTraverseCityKoaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeUncleDuckysPaddlersVillageLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeUncleDuckysPaddlersVillageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeAnchorInnLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeAnchorInnLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeLeelanauPinesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeLeelanauPinesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeTimberRidgeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeTimberRidgeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeStIgnaceKoaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeStIgnaceKoaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeIndianRiverLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeIndianRiverLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeStraitsStateParkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeStraitsStateParkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeCabinsOfMackinawLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeCabinsOfMackinawLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeTeePeeCampgroundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeTeePeeCampgroundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeMunisingKoaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeMunisingKoaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeTouristParkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeTouristParkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeUncleDuckysAuTrainLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeUncleDuckysAuTrainLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeFortSuperiorLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeFortSuperiorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeAuTrainLakeCampgroundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeAuTrainLakeCampgroundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrapeMidnrReservationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrapeMidnrReservationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ServerlessDeploymentBucketName"
            }
          },
          "ScrapeTraverseCityStateParkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeTraverseCityStateParkLambdaVersionyLIWgodsE3CpIGA6bakR90OkVdkeRMvlBrewdxi8Q"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeTraverseCityStateParkLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeAnchorInnLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeAnchorInnLambdaVersion5T5Zbadt4QpbkGSuv9ZPCSLDjwGaaZQxyhV3HvLaGqE"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeAnchorInnLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeTraverseCityKoaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeTraverseCityKoaLambdaVersionrpDyi8CalRjcKv8gf76rei0qgtsdzrnt4nqKXxdo"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeTraverseCityKoaLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeUncleDuckysPaddlersVillageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeUncleDuckysPaddlersVillageLambdaVersion2v5iOfrPUuxVPxccTzCgB0GHjOJIREiySdAxIYseo"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeUncleDuckysPaddlersVillageLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeLeelanauPinesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeLeelanauPinesLambdaVersionnGM10RAySqs3BhnEf0DjyTm6lNMETj8ijhVsga0JY"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeLeelanauPinesLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeTimberRidgeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeTimberRidgeLambdaVersion5l4uAHg0M8VlvfRJYXfIEuqh10s21XV6gQSApWTRQtU"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeTimberRidgeLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeStraitsStateParkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeStraitsStateParkLambdaVersionVmcUaatyFK7ShwMcZqf0OdNsL2Gj1DLZ5TawZtGxUQ"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeStraitsStateParkLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeStIgnaceKoaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeStIgnaceKoaLambdaVersionSssuszPczfC7KHS0F5W0OMVtxZxny6iODfqGNFRi4"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeStIgnaceKoaLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeIndianRiverLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeIndianRiverLambdaVersioncqLh0y2CFVywagstmiHuvGqtvNLtJMcvoflAAUCG8"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeIndianRiverLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeTeePeeCampgroundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeTeePeeCampgroundLambdaVersionsF7VWzQHec1yaVRjj3ePS0Uki7PcAkNBl14AHVwqn8"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeTeePeeCampgroundLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeCabinsOfMackinawLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeCabinsOfMackinawLambdaVersionoXcvISDPCvroxxCc2MExZU1aOeKtZUU5L4lSfwhyLdA"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeCabinsOfMackinawLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeUncleDuckysAuTrainLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeUncleDuckysAuTrainLambdaVersionp3DMjI8M4RpcOsPD5kJ438ilKDYP7kqpDn4q77ku8"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeUncleDuckysAuTrainLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeTouristParkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeTouristParkLambdaVersiongvPUjCsRHj4DijvxmDjo6Kp9f1InipLbmuozBLq4"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeTouristParkLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeMunisingKoaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeMunisingKoaLambdaVersionujaeolBvWGJMmpii0M1HUDt7ifHc2lNQ84E8PeAt8"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeMunisingKoaLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeFortSuperiorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeFortSuperiorLambdaVersionK3j37Zxx1CsQpK6mJvJbvAqheE9S3P8Fw0NO6a3e2A"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeFortSuperiorLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeAuTrainLakeCampgroundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeAuTrainLakeCampgroundLambdaVersionSL9ozOGgH2T4fsIJNU0A3EuGpnTzOuh4BtK5NCKAY"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeAuTrainLakeCampgroundLambdaFunctionQualifiedArn"
            }
          },
          "ScrapeMidnrReservationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrapeMidnrReservationsLambdaVersion7FFMII94qcOvPbF728Va88YcJrReVfDQaRLvYQ8u0Q"
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ScrapeMidnrReservationsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-caravan-scrapers-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "dockerizePip": true,
        "slim": true,
        "useDownloadCache": true,
        "useStaticCache": true,
        "layer": false,
        "slimPatternsAppendDefaults": false,
        "strip": true,
        "noDeploy": [
          "boto3",
          "botocore",
          "pip",
          "setuptools",
          "docutils",
          "jmespath",
          "python-dateutil",
          "s3transfer",
          "six"
        ]
      }
    },
    "plugins": [
      "serverless-python-requirements"
    ],
    "pluginsData": {},
    "functions": {
      "scrapeTraverseCityStatePark": {
        "handler": "scrapers/traverse_city/scrapeTraverseCityStatePark/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/traverse_city/scrapeTraverseCityStatePark/lambda_function.py",
            "scrapers/traverse_city/scrapeTraverseCityStatePark/__init__.py",
            "scrapers/__init__.py",
            "scrapers/midnrReservations/lambda_function.py",
            "scrapers/midnrReservations/__init__.py"
          ],
          "artifact": ".serverless/scrapeTraverseCityStatePark.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/traverse-city-state-park",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeTraverseCityStatePark",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeTraverseCityStateParkLambdaVersionyLIWgodsE3CpIGA6bakR90OkVdkeRMvlBrewdxi8Q"
      },
      "scrapeTraverseCityKoa": {
        "handler": "scrapers/traverse_city/scrapeTraverseCityKoa/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/traverse_city/scrapeTraverseCityKoa/lambda_function.py",
            "scrapers/traverse_city/scrapeTraverseCityKoa/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeTraverseCityKoa.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/traverse-city-koa",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeTraverseCityKoa",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeTraverseCityKoaLambdaVersionrpDyi8CalRjcKv8gf76rei0qgtsdzrnt4nqKXxdo"
      },
      "scrapeUncleDuckysPaddlersVillage": {
        "handler": "scrapers/traverse_city/scrapeUncleDuckysPaddlersVillage/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/traverse_city/scrapeUncleDuckysPaddlersVillage/lambda_function.py",
            "scrapers/traverse_city/scrapeUncleDuckysPaddlersVillage/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeUncleDuckysPaddlersVillage.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/uncle-duckys-paddlers-village",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeUncleDuckysPaddlersVillage",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeUncleDuckysPaddlersVillageLambdaVersion2v5iOfrPUuxVPxccTzCgB0GHjOJIREiySdAxIYseo"
      },
      "scrapeAnchorInn": {
        "handler": "scrapers/traverse_city/scrapeAnchorInn/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/traverse_city/scrapeAnchorInn/lambda_function.py",
            "scrapers/traverse_city/scrapeAnchorInn/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeAnchorInn.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/anchor-inn",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeAnchorInn",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeAnchorInnLambdaVersion5T5Zbadt4QpbkGSuv9ZPCSLDjwGaaZQxyhV3HvLaGqE"
      },
      "scrapeLeelanauPines": {
        "handler": "scrapers/traverse_city/scrapeLeelanauPines/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/traverse_city/scrapeLeelanauPines/lambda_function.py",
            "scrapers/traverse_city/scrapeLeelanauPines/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeLeelanauPines.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/leelanau-pines",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeLeelanauPines",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeLeelanauPinesLambdaVersionnGM10RAySqs3BhnEf0DjyTm6lNMETj8ijhVsga0JY"
      },
      "scrapeTimberRidge": {
        "handler": "scrapers/traverse_city/scrapeTimberRidge/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/traverse_city/scrapeTimberRidge/lambda_function.py",
            "scrapers/traverse_city/scrapeTimberRidge/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeTimberRidge.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/timber-ridge",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeTimberRidge",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeTimberRidgeLambdaVersion5l4uAHg0M8VlvfRJYXfIEuqh10s21XV6gQSApWTRQtU"
      },
      "scrapeStIgnaceKoa": {
        "handler": "scrapers/mackinac_city/scrapeStIgnaceKoa/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/mackinac_city/scrapeStIgnaceKoa/lambda_function.py",
            "scrapers/mackinac_city/scrapeStIgnaceKoa/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeStIgnaceKoa.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/st-ignace-koa",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeStIgnaceKoa",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeStIgnaceKoaLambdaVersionSssuszPczfC7KHS0F5W0OMVtxZxny6iODfqGNFRi4"
      },
      "scrapeIndianRiver": {
        "handler": "scrapers/mackinac_city/scrapeIndianRiver/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/mackinac_city/scrapeIndianRiver/lambda_function.py",
            "scrapers/mackinac_city/scrapeIndianRiver/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeIndianRiver.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/indian-river",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeIndianRiver",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeIndianRiverLambdaVersioncqLh0y2CFVywagstmiHuvGqtvNLtJMcvoflAAUCG8"
      },
      "scrapeStraitsStatePark": {
        "handler": "scrapers/mackinac_city/scrapeStraitsStatePark/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/mackinac_city/scrapeStraitsStatePark/lambda_function.py",
            "scrapers/mackinac_city/scrapeStraitsStatePark/__init__.py",
            "scrapers/__init__.py",
            "scrapers/midnrReservations/lambda_function.py",
            "scrapers/midnrReservations/__init__.py"
          ],
          "artifact": ".serverless/scrapeStraitsStatePark.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/straits-state-park",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeStraitsStatePark",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeStraitsStateParkLambdaVersionVmcUaatyFK7ShwMcZqf0OdNsL2Gj1DLZ5TawZtGxUQ"
      },
      "scrapeCabinsOfMackinaw": {
        "handler": "scrapers/mackinac_city/scrapeCabinsOfMackinaw/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/mackinac_city/scrapeCabinsOfMackinaw/lambda_function.py",
            "scrapers/mackinac_city/scrapeCabinsOfMackinaw/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeCabinsOfMackinaw.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/cabins-of-mackinaw",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeCabinsOfMackinaw",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeCabinsOfMackinawLambdaVersionoXcvISDPCvroxxCc2MExZU1aOeKtZUU5L4lSfwhyLdA"
      },
      "scrapeTeePeeCampground": {
        "handler": "scrapers/mackinac_city/scrapeTeePeeCampground/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/mackinac_city/scrapeTeePeeCampground/lambda_function.py",
            "scrapers/mackinac_city/scrapeTeePeeCampground/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeTeePeeCampground.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/teepee-campground",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeTeePeeCampground",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeTeePeeCampgroundLambdaVersionsF7VWzQHec1yaVRjj3ePS0Uki7PcAkNBl14AHVwqn8"
      },
      "scrapeMunisingKoa": {
        "handler": "scrapers/pictured_rocks/scrapeMunisingKoa/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/pictured_rocks/scrapeMunisingKoa/lambda_function.py",
            "scrapers/pictured_rocks/scrapeMunisingKoa/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeMunisingKoa.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/munising-koa",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeMunisingKoa",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeMunisingKoaLambdaVersionujaeolBvWGJMmpii0M1HUDt7ifHc2lNQ84E8PeAt8"
      },
      "scrapeTouristPark": {
        "handler": "scrapers/pictured_rocks/scrapeTouristPark/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/pictured_rocks/scrapeTouristPark/lambda_function.py",
            "scrapers/pictured_rocks/scrapeTouristPark/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeTouristPark.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/tourist-park",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeTouristPark",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeTouristParkLambdaVersiongvPUjCsRHj4DijvxmDjo6Kp9f1InipLbmuozBLq4"
      },
      "scrapeUncleDuckysAuTrain": {
        "handler": "scrapers/pictured_rocks/scrapeUncleDuckysAuTrain/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/pictured_rocks/scrapeUncleDuckysAuTrain/lambda_function.py",
            "scrapers/pictured_rocks/scrapeUncleDuckysAuTrain/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeUncleDuckysAuTrain.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/uncle-duckys-au-train",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeUncleDuckysAuTrain",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeUncleDuckysAuTrainLambdaVersionp3DMjI8M4RpcOsPD5kJ438ilKDYP7kqpDn4q77ku8"
      },
      "scrapeFortSuperior": {
        "handler": "scrapers/pictured_rocks/scrapeFortSuperior/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/pictured_rocks/scrapeFortSuperior/lambda_function.py",
            "scrapers/pictured_rocks/scrapeFortSuperior/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeFortSuperior.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/fort-superior",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeFortSuperior",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeFortSuperiorLambdaVersionK3j37Zxx1CsQpK6mJvJbvAqheE9S3P8Fw0NO6a3e2A"
      },
      "scrapeAuTrainLakeCampground": {
        "handler": "scrapers/pictured_rocks/scrapeAuTrainLakeCampground/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/pictured_rocks/scrapeAuTrainLakeCampground/lambda_function.py",
            "scrapers/pictured_rocks/scrapeAuTrainLakeCampground/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeAuTrainLakeCampground.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/au-train-lake",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeAuTrainLakeCampground",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeAuTrainLakeCampgroundLambdaVersionSL9ozOGgH2T4fsIJNU0A3EuGpnTzOuh4BtK5NCKAY"
      },
      "scrapeMidnrReservations": {
        "handler": "scrapers/midnrReservations/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "scrapers/midnrReservations/lambda_function.py",
            "scrapers/midnrReservations/__init__.py",
            "scrapers/__init__.py"
          ],
          "artifact": ".serverless/scrapeMidnrReservations.zip"
        },
        "events": [
          {
            "http": {
              "path": "scrapers/midnr-reservations",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "caravan-scrapers-dev-scrapeMidnrReservations",
        "module": ".",
        "memory": 512,
        "timeout": 60,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ScrapeMidnrReservationsLambdaVersion7FFMII94qcOvPbF728Va88YcJrReVfDQaRLvYQ8u0Q"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "caravan-scrapers",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!node_modules/**",
          "!venv/**",
          "!.git/**",
          "!.env*",
          "!__pycache__/**",
          "!*.pyc",
          "!scrapers/**",
          "!create_lambda_scrapers.py",
          "!README.md",
          "!serverless*.yml"
        ],
        "artifactsS3KeyDirname": "serverless/caravan-scrapers/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-09b9811e-0f55",
        "artifactDirectoryName": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {}
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/caravan-scrapers/dev/1745461408144-2025-04-24T02:23:28.144Z",
    "artifact": ""
  }
}